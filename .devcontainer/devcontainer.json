// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/devcontainers
{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "Pytorch GPU",
	"image": "nvcr.io/nvidia/pytorch:24.05-py3",
	//"build": {
	//	"context": "..",
	//	"dockerfile": "Dockerfile"
	//},

	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": []

	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	"mounts": [
		"source=${localEnv:HOME}${localEnv:USERPROFILE}\\devcontainer,target=/home/vscode,type=bind,consistency=cached"
	],

	// 3. Use 'runArgs' to pass arguments to the container.
	// run the container with all GPUs
	"runArgs": [
		"--gpus",
		"all"
	],

	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		// ZSH without OMZ
		"ghcr.io/devcontainers/features/common-utils:2": {
			"installZsh": "true",
			"configureZshAsDefaultShell": "true",
			"installOhMyZsh": "false",
			"installOhMyZshConfig": "false",
			"username": "vscode",
			"userUid": "1000",
			"userGid": "1000",
			"upgradePackages": "true"
		},
		// git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		}
	},

	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/usr/bin/python",
                "python.testing.pytestEnabled": true,
                "python.testing.unittestEnabled": false,
                "files.exclude": {
                    ".coverage": true,
                    ".pytest_cache": true,
                    "__pycache__": true
                }
			},
			// installs useful extensions
			"extensions": [
				"ms-python.python",
				"ms-python.debugpy",
				"ms-python.vscode-pylance",
				"ms-python.isort",
                "ms-python.black-formatter",
				"ms-toolsai.jupyter",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-toolsai.tensorboard",
				"charliermarsh.ruff"
			]
		}
	},

	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode",

	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts

	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",

	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// for the nvida containers, sh points to sh-wrap. We want it to point to dash
	// https://wiki.debian.org/Shell
	"onCreateCommand": "sudo ln -sf /usr/bin/dash /usr/bin/sh"

	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",

	// 10. Use 'postCreateCommand' to run commands after the container is created.
	,"postCreateCommand": "git config --global --add safe.directory ${containerWorkspaceFolder}"

	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	,"postStartCommand": "pip3 install --user -r requirements-dev.txt && pre-commit install && export GPG_TTY=$(tty)"

	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully.
	// "postAttachCommand": "",
}
